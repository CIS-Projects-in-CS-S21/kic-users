// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FeedClient is the client API for Feed service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedClient interface {
	// Generate a stream of posts until either exhausted or the client requests an end.
	GenerateFeedForUser(ctx context.Context, in *GenerateFeedForUserRequest, opts ...grpc.CallOption) (Feed_GenerateFeedForUserClient, error)
}

type feedClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedClient(cc grpc.ClientConnInterface) FeedClient {
	return &feedClient{cc}
}

func (c *feedClient) GenerateFeedForUser(ctx context.Context, in *GenerateFeedForUserRequest, opts ...grpc.CallOption) (Feed_GenerateFeedForUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Feed_serviceDesc.Streams[0], "/kic.feed.Feed/GenerateFeedForUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &feedGenerateFeedForUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Feed_GenerateFeedForUserClient interface {
	Recv() (*GenerateFeedForUserResponse, error)
	grpc.ClientStream
}

type feedGenerateFeedForUserClient struct {
	grpc.ClientStream
}

func (x *feedGenerateFeedForUserClient) Recv() (*GenerateFeedForUserResponse, error) {
	m := new(GenerateFeedForUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FeedServer is the server API for Feed service.
// All implementations must embed UnimplementedFeedServer
// for forward compatibility
type FeedServer interface {
	// Generate a stream of posts until either exhausted or the client requests an end.
	GenerateFeedForUser(*GenerateFeedForUserRequest, Feed_GenerateFeedForUserServer) error
	mustEmbedUnimplementedFeedServer()
}

// UnimplementedFeedServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServer struct {
}

func (UnimplementedFeedServer) GenerateFeedForUser(*GenerateFeedForUserRequest, Feed_GenerateFeedForUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateFeedForUser not implemented")
}
func (UnimplementedFeedServer) mustEmbedUnimplementedFeedServer() {}

// UnsafeFeedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServer will
// result in compilation errors.
type UnsafeFeedServer interface {
	mustEmbedUnimplementedFeedServer()
}

func RegisterFeedServer(s grpc.ServiceRegistrar, srv FeedServer) {
	s.RegisterService(&_Feed_serviceDesc, srv)
}

func _Feed_GenerateFeedForUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateFeedForUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeedServer).GenerateFeedForUser(m, &feedGenerateFeedForUserServer{stream})
}

type Feed_GenerateFeedForUserServer interface {
	Send(*GenerateFeedForUserResponse) error
	grpc.ServerStream
}

type feedGenerateFeedForUserServer struct {
	grpc.ServerStream
}

func (x *feedGenerateFeedForUserServer) Send(m *GenerateFeedForUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Feed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kic.feed.Feed",
	HandlerType: (*FeedServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateFeedForUser",
			Handler:       _Feed_GenerateFeedForUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/feed.proto",
}
