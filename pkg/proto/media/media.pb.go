//
// These are messages and services relating to a storing media, such as uploading and downloading files.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: proto/media.proto

package proto

import (
	reflect "reflect"
	sync "sync"

	common "github.com/kic/users/pkg/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//These are errors used to inform the client that is requesting a connection (downloading a file) what the issue is.
//The variable names denote the issue.
type DownloadFileByNameError int32

const (
	// FILE_NOT_FOUND denotes if file is not found.
	DownloadFileByNameError_FILE_NOT_FOUND DownloadFileByNameError = 0
	// BUCKET_NOT_FOUND denotes if bucket is not found.
	DownloadFileByNameError_BUCKET_NOT_FOUND DownloadFileByNameError = 1
)

// Enum value maps for DownloadFileByNameError.
var (
	DownloadFileByNameError_name = map[int32]string{
		0: "FILE_NOT_FOUND",
		1: "BUCKET_NOT_FOUND",
	}
	DownloadFileByNameError_value = map[string]int32{
		"FILE_NOT_FOUND":   0,
		"BUCKET_NOT_FOUND": 1,
	}
)

func (x DownloadFileByNameError) Enum() *DownloadFileByNameError {
	p := new(DownloadFileByNameError)
	*p = x
	return p
}

func (x DownloadFileByNameError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadFileByNameError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_media_proto_enumTypes[0].Descriptor()
}

func (DownloadFileByNameError) Type() protoreflect.EnumType {
	return &file_proto_media_proto_enumTypes[0]
}

func (x DownloadFileByNameError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadFileByNameError.Descriptor instead.
func (DownloadFileByNameError) EnumDescriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{0}
}

// Flags sent with a get file by metadata request to tell the server how seriously it wants the metadata request
// to be conformed to
type MetadataStrictness int32

const (
	// Only include a given file if all key value pairs match
	MetadataStrictness_STRICT MetadataStrictness = 0
	// Include a file if it matches any of the key value pairs
	MetadataStrictness_CASUAL MetadataStrictness = 1
	// Only include a file if it fails to match all key value pairs
	MetadataStrictness_STRICTLY_OPPOSITE MetadataStrictness = 2
	// Only include a file if it matches less than all key value pairs
	MetadataStrictness_CASUALLY_OPPOSITE MetadataStrictness = 3
)

// Enum value maps for MetadataStrictness.
var (
	MetadataStrictness_name = map[int32]string{
		0: "STRICT",
		1: "CASUAL",
		2: "STRICTLY_OPPOSITE",
		3: "CASUALLY_OPPOSITE",
	}
	MetadataStrictness_value = map[string]int32{
		"STRICT":            0,
		"CASUAL":            1,
		"STRICTLY_OPPOSITE": 2,
		"CASUALLY_OPPOSITE": 3,
	}
)

func (x MetadataStrictness) Enum() *MetadataStrictness {
	p := new(MetadataStrictness)
	*p = x
	return p
}

func (x MetadataStrictness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetadataStrictness) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_media_proto_enumTypes[1].Descriptor()
}

func (MetadataStrictness) Type() protoreflect.EnumType {
	return &file_proto_media_proto_enumTypes[1]
}

func (x MetadataStrictness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetadataStrictness.Descriptor instead.
func (MetadataStrictness) EnumDescriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{1}
}

//
//These are errors used to inform the client that is requesting a connection (deleting a file) what the issue is.
//The variable names denote the issue.
type DeleteFileError int32

const (
	// ACCESS_DENIED denotes if file is not able to be deleted due to denial of access.
	DeleteFileError_ACCESS_DENIED DeleteFileError = 0
)

// Enum value maps for DeleteFileError.
var (
	DeleteFileError_name = map[int32]string{
		0: "ACCESS_DENIED",
	}
	DeleteFileError_value = map[string]int32{
		"ACCESS_DENIED": 0,
	}
)

func (x DeleteFileError) Enum() *DeleteFileError {
	p := new(DeleteFileError)
	*p = x
	return p
}

func (x DeleteFileError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteFileError) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_media_proto_enumTypes[2].Descriptor()
}

func (DeleteFileError) Type() protoreflect.EnumType {
	return &file_proto_media_proto_enumTypes[2]
}

func (x DeleteFileError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteFileError.Descriptor instead.
func (DeleteFileError) EnumDescriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{2}
}

//
//Request to upload file for user.
type UploadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Either upload File together or in bytes
	//
	// Types that are assignable to Data:
	//	*UploadFileRequest_FileInfo
	//	*UploadFileRequest_Chunk
	Data isUploadFileRequest_Data `protobuf_oneof:"data"`
}

func (x *UploadFileRequest) Reset() {
	*x = UploadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRequest) ProtoMessage() {}

func (x *UploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRequest.ProtoReflect.Descriptor instead.
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{0}
}

func (m *UploadFileRequest) GetData() isUploadFileRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UploadFileRequest) GetFileInfo() *common.File {
	if x, ok := x.GetData().(*UploadFileRequest_FileInfo); ok {
		return x.FileInfo
	}
	return nil
}

func (x *UploadFileRequest) GetChunk() []byte {
	if x, ok := x.GetData().(*UploadFileRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isUploadFileRequest_Data interface {
	isUploadFileRequest_Data()
}

type UploadFileRequest_FileInfo struct {
	FileInfo *common.File `protobuf:"bytes,1,opt,name=fileInfo,proto3,oneof"`
}

type UploadFileRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadFileRequest_FileInfo) isUploadFileRequest_Data() {}

func (*UploadFileRequest_Chunk) isUploadFileRequest_Data() {}

//
//Response to user requesting file upload.
type UploadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of file being uploaded
	FileID string `protobuf:"bytes,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	// Size of file in bytes
	BytesRead uint64 `protobuf:"varint,2,opt,name=bytesRead,proto3" json:"bytesRead,omitempty"`
}

func (x *UploadFileResponse) Reset() {
	*x = UploadFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResponse) ProtoMessage() {}

func (x *UploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResponse.ProtoReflect.Descriptor instead.
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{1}
}

func (x *UploadFileResponse) GetFileID() string {
	if x != nil {
		return x.FileID
	}
	return ""
}

func (x *UploadFileResponse) GetBytesRead() uint64 {
	if x != nil {
		return x.BytesRead
	}
	return 0
}

//
//Request to check for file for user.
type CheckForFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information of file to be checked
	FileInfo *common.File `protobuf:"bytes,1,opt,name=fileInfo,proto3" json:"fileInfo,omitempty"`
}

func (x *CheckForFileRequest) Reset() {
	*x = CheckForFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckForFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckForFileRequest) ProtoMessage() {}

func (x *CheckForFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckForFileRequest.ProtoReflect.Descriptor instead.
func (*CheckForFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{2}
}

func (x *CheckForFileRequest) GetFileInfo() *common.File {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

//
//Response to check for file for user.
type CheckForFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns true if file is found to exist
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *CheckForFileResponse) Reset() {
	*x = CheckForFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckForFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckForFileResponse) ProtoMessage() {}

func (x *CheckForFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckForFileResponse.ProtoReflect.Descriptor instead.
func (*CheckForFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{3}
}

func (x *CheckForFileResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

//
//Request to download file for user
type DownloadFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information of file to be downloaded
	FileInfo *common.File `protobuf:"bytes,1,opt,name=fileInfo,proto3" json:"fileInfo,omitempty"`
}

func (x *DownloadFileRequest) Reset() {
	*x = DownloadFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRequest) ProtoMessage() {}

func (x *DownloadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRequest.ProtoReflect.Descriptor instead.
func (*DownloadFileRequest) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{4}
}

func (x *DownloadFileRequest) GetFileInfo() *common.File {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

//
//Response to download file for user
type DownloadFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//either the file can be downloaded in bytes or there is an error
	//
	// Types that are assignable to Data:
	//	*DownloadFileResponse_Error
	//	*DownloadFileResponse_Chunk
	Data isDownloadFileResponse_Data `protobuf_oneof:"data"`
}

func (x *DownloadFileResponse) Reset() {
	*x = DownloadFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileResponse) ProtoMessage() {}

func (x *DownloadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileResponse.ProtoReflect.Descriptor instead.
func (*DownloadFileResponse) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{5}
}

func (m *DownloadFileResponse) GetData() isDownloadFileResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DownloadFileResponse) GetError() DownloadFileByNameError {
	if x, ok := x.GetData().(*DownloadFileResponse_Error); ok {
		return x.Error
	}
	return DownloadFileByNameError_FILE_NOT_FOUND
}

func (x *DownloadFileResponse) GetChunk() []byte {
	if x, ok := x.GetData().(*DownloadFileResponse_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isDownloadFileResponse_Data interface {
	isDownloadFileResponse_Data()
}

type DownloadFileResponse_Error struct {
	Error DownloadFileByNameError `protobuf:"varint,1,opt,name=error,proto3,enum=kic.media.DownloadFileByNameError,oneof"`
}

type DownloadFileResponse_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*DownloadFileResponse_Error) isDownloadFileResponse_Data() {}

func (*DownloadFileResponse_Chunk) isDownloadFileResponse_Data() {}

//
//Request to get files for user by metadata request
type GetFilesByMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of desired metadata
	DesiredMetadata map[string]string `protobuf:"bytes,1,rep,name=desiredMetadata,proto3" json:"desiredMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Flags sent with a get file by metadata request to tell the server how seriously it wants the metadata request
	// to be conformed to
	Strictness MetadataStrictness `protobuf:"varint,2,opt,name=strictness,proto3,enum=kic.media.MetadataStrictness" json:"strictness,omitempty"`
}

func (x *GetFilesByMetadataRequest) Reset() {
	*x = GetFilesByMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesByMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesByMetadataRequest) ProtoMessage() {}

func (x *GetFilesByMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesByMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetFilesByMetadataRequest) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{6}
}

func (x *GetFilesByMetadataRequest) GetDesiredMetadata() map[string]string {
	if x != nil {
		return x.DesiredMetadata
	}
	return nil
}

func (x *GetFilesByMetadataRequest) GetStrictness() MetadataStrictness {
	if x != nil {
		return x.Strictness
	}
	return MetadataStrictness_STRICT
}

//
//Response to get files for user by metadata request
type GetFilesByMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information of file to be downloaded
	FileInfos []*common.File `protobuf:"bytes,1,rep,name=fileInfos,proto3" json:"fileInfos,omitempty"`
}

func (x *GetFilesByMetadataResponse) Reset() {
	*x = GetFilesByMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesByMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesByMetadataResponse) ProtoMessage() {}

func (x *GetFilesByMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesByMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetFilesByMetadataResponse) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{7}
}

func (x *GetFilesByMetadataResponse) GetFileInfos() []*common.File {
	if x != nil {
		return x.FileInfos
	}
	return nil
}

//
//Request to delete file for user with metadata request
type DeleteFilesWithMetaDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of desired metadata of file to be deleted
	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Flags sent to tell the server how seriously it wants the metadata request
	// to be conformed to
	Strictness MetadataStrictness `protobuf:"varint,2,opt,name=strictness,proto3,enum=kic.media.MetadataStrictness" json:"strictness,omitempty"`
}

func (x *DeleteFilesWithMetaDataRequest) Reset() {
	*x = DeleteFilesWithMetaDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilesWithMetaDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilesWithMetaDataRequest) ProtoMessage() {}

func (x *DeleteFilesWithMetaDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilesWithMetaDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteFilesWithMetaDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFilesWithMetaDataRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DeleteFilesWithMetaDataRequest) GetStrictness() MetadataStrictness {
	if x != nil {
		return x.Strictness
	}
	return MetadataStrictness_STRICT
}

//
//Response to  delete file for user with metadata request
type DeleteFilesWithMetaDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DeleteFileError denotes if file is not able to be deleted.
	Error DeleteFileError `protobuf:"varint,1,opt,name=error,proto3,enum=kic.media.DeleteFileError" json:"error,omitempty"`
}

func (x *DeleteFilesWithMetaDataResponse) Reset() {
	*x = DeleteFilesWithMetaDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_media_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilesWithMetaDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilesWithMetaDataResponse) ProtoMessage() {}

func (x *DeleteFilesWithMetaDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_media_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilesWithMetaDataResponse.ProtoReflect.Descriptor instead.
func (*DeleteFilesWithMetaDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_media_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteFilesWithMetaDataResponse) GetError() DeleteFileError {
	if x != nil {
		return x.Error
	}
	return DeleteFileError_ACCESS_DENIED
}

var File_proto_media_proto protoreflect.FileDescriptor

var file_proto_media_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x12,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x63, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x63, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x13, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x72, 0x0a,
	0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x83, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x63, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x69, 0x63,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x1f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6b, 0x69,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x43,
	0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x2a, 0x5a, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x4f, 0x50,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x53, 0x55,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4f, 0x50, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x03, 0x2a,
	0x24, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x32, 0xe2, 0x03, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x12, 0x57, 0x0a, 0x12, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x6b, 0x69, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x69, 0x63, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x12,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x6b, 0x69,
	0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x29, 0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6b, 0x69, 0x63, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x15, 0x5a, 0x13, 0x2e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_media_proto_rawDescOnce sync.Once
	file_proto_media_proto_rawDescData = file_proto_media_proto_rawDesc
)

func file_proto_media_proto_rawDescGZIP() []byte {
	file_proto_media_proto_rawDescOnce.Do(func() {
		file_proto_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_media_proto_rawDescData)
	})
	return file_proto_media_proto_rawDescData
}

var (
	file_proto_media_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
	file_proto_media_proto_msgTypes  = make([]protoimpl.MessageInfo, 12)
	file_proto_media_proto_goTypes   = []interface{}{
		(DownloadFileByNameError)(0),            // 0: kic.media.DownloadFileByNameError
		(MetadataStrictness)(0),                 // 1: kic.media.MetadataStrictness
		(DeleteFileError)(0),                    // 2: kic.media.DeleteFileError
		(*UploadFileRequest)(nil),               // 3: kic.media.UploadFileRequest
		(*UploadFileResponse)(nil),              // 4: kic.media.UploadFileResponse
		(*CheckForFileRequest)(nil),             // 5: kic.media.CheckForFileRequest
		(*CheckForFileResponse)(nil),            // 6: kic.media.CheckForFileResponse
		(*DownloadFileRequest)(nil),             // 7: kic.media.DownloadFileRequest
		(*DownloadFileResponse)(nil),            // 8: kic.media.DownloadFileResponse
		(*GetFilesByMetadataRequest)(nil),       // 9: kic.media.GetFilesByMetadataRequest
		(*GetFilesByMetadataResponse)(nil),      // 10: kic.media.GetFilesByMetadataResponse
		(*DeleteFilesWithMetaDataRequest)(nil),  // 11: kic.media.DeleteFilesWithMetaDataRequest
		(*DeleteFilesWithMetaDataResponse)(nil), // 12: kic.media.DeleteFilesWithMetaDataResponse
		nil,                                     // 13: kic.media.GetFilesByMetadataRequest.DesiredMetadataEntry
		nil,                                     // 14: kic.media.DeleteFilesWithMetaDataRequest.MetadataEntry
		(*common.File)(nil),                     // 15: kic.common.File
	}
)

var file_proto_media_proto_depIdxs = []int32{
	15, // 0: kic.media.UploadFileRequest.fileInfo:type_name -> kic.common.File
	15, // 1: kic.media.CheckForFileRequest.fileInfo:type_name -> kic.common.File
	15, // 2: kic.media.DownloadFileRequest.fileInfo:type_name -> kic.common.File
	0,  // 3: kic.media.DownloadFileResponse.error:type_name -> kic.media.DownloadFileByNameError
	13, // 4: kic.media.GetFilesByMetadataRequest.desiredMetadata:type_name -> kic.media.GetFilesByMetadataRequest.DesiredMetadataEntry
	1,  // 5: kic.media.GetFilesByMetadataRequest.strictness:type_name -> kic.media.MetadataStrictness
	15, // 6: kic.media.GetFilesByMetadataResponse.fileInfos:type_name -> kic.common.File
	14, // 7: kic.media.DeleteFilesWithMetaDataRequest.metadata:type_name -> kic.media.DeleteFilesWithMetaDataRequest.MetadataEntry
	1,  // 8: kic.media.DeleteFilesWithMetaDataRequest.strictness:type_name -> kic.media.MetadataStrictness
	2,  // 9: kic.media.DeleteFilesWithMetaDataResponse.error:type_name -> kic.media.DeleteFileError
	3,  // 10: kic.media.MediaStorage.UploadFile:input_type -> kic.media.UploadFileRequest
	7,  // 11: kic.media.MediaStorage.DownloadFileByName:input_type -> kic.media.DownloadFileRequest
	5,  // 12: kic.media.MediaStorage.CheckForFileByName:input_type -> kic.media.CheckForFileRequest
	9,  // 13: kic.media.MediaStorage.GetFilesWithMetadata:input_type -> kic.media.GetFilesByMetadataRequest
	11, // 14: kic.media.MediaStorage.DeleteFilesWithMetaData:input_type -> kic.media.DeleteFilesWithMetaDataRequest
	4,  // 15: kic.media.MediaStorage.UploadFile:output_type -> kic.media.UploadFileResponse
	8,  // 16: kic.media.MediaStorage.DownloadFileByName:output_type -> kic.media.DownloadFileResponse
	6,  // 17: kic.media.MediaStorage.CheckForFileByName:output_type -> kic.media.CheckForFileResponse
	10, // 18: kic.media.MediaStorage.GetFilesWithMetadata:output_type -> kic.media.GetFilesByMetadataResponse
	12, // 19: kic.media.MediaStorage.DeleteFilesWithMetaData:output_type -> kic.media.DeleteFilesWithMetaDataResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_media_proto_init() }
func file_proto_media_proto_init() {
	if File_proto_media_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckForFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_media_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckForFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_media_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_media_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_media_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesByMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_media_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilesByMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_media_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilesWithMetaDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_media_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilesWithMetaDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_media_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*UploadFileRequest_FileInfo)(nil),
		(*UploadFileRequest_Chunk)(nil),
	}
	file_proto_media_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DownloadFileResponse_Error)(nil),
		(*DownloadFileResponse_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_media_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_media_proto_goTypes,
		DependencyIndexes: file_proto_media_proto_depIdxs,
		EnumInfos:         file_proto_media_proto_enumTypes,
		MessageInfos:      file_proto_media_proto_msgTypes,
	}.Build()
	File_proto_media_proto = out.File
	file_proto_media_proto_rawDesc = nil
	file_proto_media_proto_goTypes = nil
	file_proto_media_proto_depIdxs = nil
}
